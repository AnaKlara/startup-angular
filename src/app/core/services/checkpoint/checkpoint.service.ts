import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable, of } from 'rxjs';
import { CheckpointModel } from '../../models/checkpoint.model';
import { CheckpointMapper } from './mappers/checkpoint.mapper';

@Injectable({
  providedIn: 'root',
})
export class CheckpointService {
  mapper = new CheckpointMapper();

  constructor(private http: HttpClient) {}

  checkpoint: CheckpointModel[] = [
    {
      id: '1',
      sonda: 'Sonda A',
      uo: 'Unidade Operacional 1',
      campo: 'Campo X',
      poco: 'Poço 123',
      intervencao: 'Manutenção de Equipamento',
      simulado: 'Simulado XYZ',
      concluido: true,
      avaliacao: 4,
      prazo: 50,
    },
    {
      id: '2',
      sonda: 'Sonda B',
      uo: 'Unidade Operacional 2',
      campo: 'Campo Y',
      poco: 'Poço 456',
      intervencao: 'Inspeção de Tubulações',
      simulado: 'Simulado ABC',
      concluido: false,
      avaliacao: 2,
      prazo: 30,
    },
    {
      id: '3',
      sonda: 'Sonda C',
      uo: 'Unidade Operacional 3',
      campo: 'Campo Z',
      poco: 'Poço 789',
      intervencao: 'Teste de Pressão',
      simulado: 'Simulado DEF',
      concluido: true,
      avaliacao: 5,
      prazo: 70,
    },
    {
      id: '4',
      sonda: 'Sonda D',
      uo: 'Unidade Operacional 4',
      campo: 'Campo W',
      poco: 'Poço 101',
      intervencao: 'Troca de Válvulas',
      simulado: 'Simulado GHI',
      concluido: false,
      avaliacao: 3,
      prazo: 45,
    },
    {
      id: '5',
      sonda: 'Sonda E',
      uo: 'Unidade Operacional 5',
      campo: 'Campo V',
      poco: 'Poço 202',
      intervencao: 'Limpeza de Tanques',
      simulado: 'Simulado JKL',
      concluido: true,
      avaliacao: 4,
      prazo: 60,
    },
    {
      id: '6',
      sonda: 'Sonda F',
      uo: 'Unidade Operacional 6',
      campo: 'Campo U',
      poco: 'Poço 303',
      intervencao: 'Calibração de Sensores',
      simulado: 'Simulado MNO',
      concluido: false,
      avaliacao: 2,
      prazo: 35,
    },
    {
      id: '7',
      sonda: 'Sonda G',
      uo: 'Unidade Operacional 7',
      campo: 'Campo T',
      poco: 'Poço 404',
      intervencao: 'Reparo de Equipamento Elétrico',
      simulado: 'Simulado PQR',
      concluido: true,
      avaliacao: 5,
      prazo: 55,
    },
    {
      id: '8',
      sonda: 'Sonda H',
      uo: 'Unidade Operacional 8',
      campo: 'Campo S',
      poco: 'Poço 505',
      intervencao: 'Monitoramento de Vibrações',
      simulado: 'Simulado STU',
      concluido: false,
      avaliacao: 3,
      prazo: 40,
    },
    {
      id: '9',
      sonda: 'Sonda I',
      uo: 'Unidade Operacional 9',
      campo: 'Campo R',
      poco: 'Poço 606',
      intervencao: 'Inspeção de Sistemas de Controle',
      simulado: 'Simulado VWX',
      concluido: true,
      avaliacao: 4,
      prazo: 65,
    },
    {
      id: '10',
      sonda: 'Sonda J',
      uo: 'Unidade Operacional 10',
      campo: 'Campo Q',
      poco: 'Poço 707',
      intervencao: 'Teste de Vazamentos',
      simulado: 'Simulado YZA',
      concluido: false,
      avaliacao: 2,
      prazo: 32,
    },
    {
      id: '11',
      sonda: 'Sonda K',
      uo: 'Unidade Operacional 11',
      campo: 'Campo P',
      poco: 'Poço 808',
      intervencao: 'Manutenção de Motores',
      simulado: 'Simulado BCD',
      concluido: true,
      avaliacao: 5,
      prazo: 75,
    },
    {
      id: '12',
      sonda: 'Sonda L',
      uo: 'Unidade Operacional 12',
      campo: 'Campo O',
      poco: 'Poço 909',
      intervencao: 'Troca de Filtros',
      simulado: 'Simulado EFG',
      concluido: false,
      avaliacao: 3,
      prazo: 42,
    },
    {
      id: '13',
      sonda: 'Sonda M',
      uo: 'Unidade Operacional 13',
      campo: 'Campo N',
      poco: 'Poço 010',
      intervencao: 'Instalação de Sensores',
      simulado: 'Simulado HIJ',
      concluido: true,
      avaliacao: 4,
      prazo: 68,
    },
    {
      id: '14',
      sonda: 'Sonda N',
      uo: 'Unidade Operacional 14',
      campo: 'Campo M',
      poco: 'Poço 111',
      intervencao: 'Calibração de Medidores',
      simulado: 'Simulado KLM',
      concluido: false,
      avaliacao: 2,
      prazo: 37,
    },
    {
      id: '15',
      sonda: 'Sonda O',
      uo: 'Unidade Operacional 15',
      campo: 'Campo L',
      poco: 'Poço 212',
      intervencao: 'Reparo de Válvulas de Controle',
      simulado: 'Simulado NOP',
      concluido: true,
      avaliacao: 5,
      prazo: 58,
    },
    {
      id: '16',
      sonda: 'Sonda P',
      uo: 'Unidade Operacional 16',
      campo: 'Campo K',
      poco: 'Poço 313',
      intervencao: 'Teste de Funcionamento de Bombas',
      simulado: 'Simulado QRS',
      concluido: false,
      avaliacao: 3,
      prazo: 47,
    },
    {
      id: '17',
      sonda: 'Sonda Q',
      uo: 'Unidade Operacional 17',
      campo: 'Campo J',
      poco: 'Poço 414',
      intervencao: 'Inspeção de Tanques de Armazenamento',
      simulado: 'Simulado TUV',
      concluido: true,
      avaliacao: 4,
      prazo: 63,
    },
    {
      id: '18',
      sonda: 'Sonda R',
      uo: 'Unidade Operacional 18',
      campo: 'Campo I',
      poco: 'Poço 515',
      intervencao: 'Manutenção de Instrumentação',
      simulado: 'Simulado WXY',
      concluido: false,
      avaliacao: 2,
      prazo: 38,
    },
    {
      id: '19',
      sonda: 'Sonda S',
      uo: 'Unidade Operacional 19',
      campo: 'Campo H',
      poco: 'Poço 616',
      intervencao: 'Troca de Cabos Elétricos',
      simulado: 'Simulado ZAB',
      concluido: true,
      avaliacao: 5,
      prazo: 52,
    },
    {
      id: '20',
      sonda: 'Sonda T',
      uo: 'Unidade Operacional 20',
      campo: 'Campo G',
      poco: 'Poço 717',
      intervencao: 'Verificação de Vazamentos',
      simulado: 'Simulado CDE',
      concluido: false,
      avaliacao: 3,
      prazo: 43,
    },
  ];

  getAll(): Observable<CheckpointModel[]> {
    // return this.http.get<CheckpointEntity>(`${environment.apiUrl}/checkpoint`).pipe(
    //     map(this.checkpointMapper.mapFrom));
    return of(this.checkpoint);
  }
}
